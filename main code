import cv2
import numpy as np
import face_recognition
import os
from datetime import datetime
import pandas as pd

# Path to known face images
path = 'known_faces'
images = []
classNames = []
myList = os.listdir(path)

# Load known faces
for cls in myList:
    curImg = cv2.imread(f'{path}/{cls}')
    images.append(curImg)
    classNames.append(os.path.splitext(cls)[0])

# Encode the known faces
def find_encodings(images):
    encode_list = []
    for img in images:
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        enc = face_recognition.face_encodings(img)
        if enc:
            encode_list.append(enc[0])
    return encode_list

encode_list_known = find_encodings(images)
print("Encoding complete")

# Create attendance directory
if not os.path.exists("attendance"):
    os.makedirs("attendance")

# Get today's attendance file
today = datetime.now().strftime('%Y-%m-%d')
filename = f'attendance/{today}.csv'

# Initialize attendance DataFrame
if os.path.exists(filename):
    attendance_df = pd.read_csv(filename)
else:
    attendance_df = pd.DataFrame(columns=['Name', 'Time'])

# Function to mark attendance
def mark_attendance(name):
    if name not in attendance_df['Name'].values:
        now = datetime.now()
        time_string = now.strftime('%H:%M:%S')
        attendance_df.loc[len(attendance_df)] = [name, time_string]
        attendance_df.to_csv(filename, index=False)
        print(f"{name} marked present at {time_string}")

# Start webcam
cap = cv2.VideoCapture(0)

while True:
    success, img = cap.read()
    if not success:
        break

    img_small = cv2.resize(img, (0, 0), fx=0.25, fy=0.25)
    img_small = cv2.cvtColor(img_small, cv2.COLOR_BGR2RGB)

    faces_cur_frame = face_recognition.face_locations(img_small)
    encodes_cur_frame = face_recognition.face_encodings(img_small, faces_cur_frame)

    for encode_face, face_loc in zip(encodes_cur_frame, faces_cur_frame):
        matches = face_recognition.compare_faces(encode_list_known, encode_face)
        face_dist = face_recognition.face_distance(encode_list_known, encode_face)
        match_index = np.argmin(face_dist)

        if matches[match_index]:
            name = classNames[match_index].capitalize()
            mark_attendance(name)

            y1, x2, y2, x1 = face_loc
            y1, x2, y2, x1 = y1*4, x2*4, y2*4, x1*4
            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(img, name, (x1+5, y2-5), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)

    cv2.imshow('Face Attendance', img)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
